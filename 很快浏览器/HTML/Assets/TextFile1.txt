<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>【WP8.1】WebView笔记 - bomo - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=62IP_0cEz3HhbrLfyt0yP7LqLTBi71fpE28OaYc_AIs1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/iMetro_HD/bundle-iMetro_HD.css?v=9G-AuFYmpxqkeOPQcw_WAuPfB2xUfxYK7gabXn6lD881"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/bomo/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/bomo/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/bomo/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'bomo', cb_enable_mathjax=false;</script>
<script src="/bundles/blog-common.js?v=0q3N7bpnLK57cw_uM7DrZa8bhyXSj2QpgEfOllvBxSo1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/bomo/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/bomo/">bomo</a></h1>
<h2>我遍历了整个世界，只为寻找访问你的接口</h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/bomo/">首页</a></li>
<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://msg.cnblogs.com/send/bomo">联系</a></li>
<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/bomo/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/bomo/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			
<!--done-->
随笔- 117&nbsp;
文章- 0&nbsp;
评论- 53&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/bomo/p/4320077.html">【WP8.1】WebView笔记</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p>之前在WP8的时候做过WebBrowser相关的笔记，在WP8.1的WebView和WebBrowser有些不一样，在这里做一些笔记</p>
<p>下面分为几个部分</p>
<p>　　1、禁止缩放</p>
<p>　　2、JS通知后台C#代码（notify）</p>
<p>　　3、C#调用JS方法</p>
<p>　　　　动态加载JS文件，动态注册事件方法（eval）</p>
<p>　　4、WebView导航</p>
<p>　　5、手势（WinJS）</p>
<p>　　6、常见问题</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt;">1、禁用缩放</span></strong><strong><span style="font-size: 14pt;">　　</span></strong></p>
<div class="cnblogs_code">
<pre><span style="color: #800000;">body </span>{
    <span style="color: #008000;">/*</span><span style="color: #008000;"> Block area from manipulation actions (zoom, pan) </span><span style="color: #008000;">*/</span><span style="color: #ff0000;">
    touch-action</span>:<span style="color: #0000ff;"> pan-y</span>;
}</pre>
</div>
<p>&nbsp;</p>
<p>　　这个值可以禁用掉缩放和横向手势</p>
<p>　　关于touch-action参见：<a href="https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh767313.aspx?f=255&amp;MSPPError=-2147217396" target="_blank">https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh767313.aspx?f=255&amp;MSPPError=-2147217396</a></p>
<p>&nbsp;</p>
<p><span style="font-size: 14pt;"><strong>2、JS通知后台C#代码（notify）</strong><strong>　</strong></span></p>
<div class="cnblogs_code">
<pre>window.external.notify(msg);</pre>
</div>
<p>注意：这里的方法名是小写的，在WP8上后面的Notify方法的首字母是大小写都可以</p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt;">3、C#调用JS方法（InvokeScriptAsync）</span></strong></p>
<p><span style="line-height: 1.5;">　　通过后台代码</span><span style="line-height: 1.5;">动态加载css，js，动态绑定事件和方法</span></p>
<p><span style="line-height: 1.5;">　　3.1、先定义传输的数据格式</span></p>
<div class="cnblogs_code">
<pre><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
<span style="color: #808080;">///</span><span style="color: #008000;"> JS消息格式
</span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> JsInvokeModel
{
    [JsonProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">type</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Type { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }

    [JsonProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">content1</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Content1 { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }

    [JsonProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">content2</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Content2 { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }

    [JsonProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">content3</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Content3 { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }
}</span></pre>
</div>
<p>　　3.2、XAML</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">WebView </span><span style="color: #ff0000;">x:Name</span><span style="color: #0000ff;">="WebView"</span><span style="color: #ff0000;"> DOMContentLoaded</span><span style="color: #0000ff;">="WebView_OnDOMContentLoaded"</span><span style="color: #ff0000;"> ScriptNotify</span><span style="color: #0000ff;">="WebView_OnScriptNotify"</span> <span style="color: #0000ff;">/&gt;</span></pre>
</div>
<p>　　3.3、下面是事件方法</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;">DOM树加载完成后执行</span>
<span style="color: #0000ff;">private</span> <span style="color: #0000ff;">async</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> WebView_OnDOMContentLoaded(WebView sender, WebViewDOMContentLoadedEventArgs args)
{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">1、动态加载css</span>
    <span style="color: #0000ff;">var</span> js = <span style="color: #800000;">@"</span><span style="color: #800000;">var myCss = document.createElement(""link"");
        myCss.rel = ""stylesheet"";
        myCss.type = ""text/css"";
        myCss.href = ""ms-appx-web:///Assets/Html/css/default.css"";
        document.body.appendChild(myCss);</span><span style="color: #800000;">"</span><span style="color: #000000;">;
    </span><span style="color: #0000ff;">await</span> sender.InvokeScriptAsync(<span style="color: #800000;">"</span><span style="color: #800000;">eval</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span><span style="color: #000000;">[] { js });

    </span><span style="color: #008000;">//</span><span style="color: #008000;">2、动态加载js库（json2）</span>
    js = <span style="color: #800000;">@"</span><span style="color: #800000;">var myScript = document.createElement(""script"");
        myScript.type = ""text/javascript"";
        myScript.src = ""ms-appx-web:///Scripts/json2.min.js"";
        document.body.appendChild(myScript);</span><span style="color: #800000;">"</span><span style="color: #000000;">;    
    </span><span style="color: #0000ff;">await</span> sender.InvokeScriptAsync(<span style="color: #800000;">"</span><span style="color: #800000;">eval</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span><span style="color: #000000;">[] {js});
    
    </span><span style="color: #008000;">//</span><span style="color: #008000;">3、调用js执行自定义代码（为图片添加点击事件，并通知）</span>
    js = <span style="color: #800000;">@"</span><span style="color: #800000;">var imgs = document.getElementsByTagName(""img"");
           for (var i = 0, len = imgs.length; i &lt; len; i++) {
               imgs[i].onclick = function (e) {
                   var jsonObj = { type: 'image', content1: this.src };
                   window.external.notify(JSON.stringify(jsonObj));
               };
           }</span><span style="color: #800000;">"</span><span style="color: #000000;">;
    </span><span style="color: #0000ff;">await</span> sender.InvokeScriptAsync(<span style="color: #800000;">"</span><span style="color: #800000;">eval</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span><span style="color: #000000;">[] {js});

    </span><span style="color: #008000;">//</span><span style="color: #008000;">4、动态加载手势</span>
    js = <span style="color: #800000;">@"</span><span style="color: #800000;">var myScript = document.createElement(""script"");
        myScript.type = ""text/javascript"";
        myScript.src = ""ms-appx-web:///Assets/Html/js/gesture.js"";
        document.body.appendChild(myScript);
        window.external.notify(myScript.src+"""");</span><span style="color: #800000;">"</span><span style="color: #000000;">;
    </span><span style="color: #0000ff;">await</span> sender.InvokeScriptAsync(<span style="color: #800000;">"</span><span style="color: #800000;">eval</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span><span style="color: #000000;">[] { js });

    </span><span style="color: #008000;">//</span><span style="color: #008000;">5、为body添加手势监听</span>
    js = <span style="color: #800000;">@"</span><span style="color: #800000;">var target = document.getElementsByTagName(""body"")[0];
           prepareTarget(target, eventListener);</span><span style="color: #800000;">"</span><span style="color: #000000;">;
    </span><span style="color: #0000ff;">await</span> sender.InvokeScriptAsync(<span style="color: #800000;">"</span><span style="color: #800000;">eval</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span><span style="color: #000000;">[] { js });
}</span></pre>
</div>
<p>　　3.4、Notify监听</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> WebView_OnScriptNotify(<span style="color: #0000ff;">object</span><span style="color: #000000;"> sender, NotifyEventArgs e)
{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">这个事件函数可以监听到JS通知的消息，消息类型为文本
    </span><span style="color: #008000;">//</span><span style="color: #008000;">这里统一消息格式为：JsInvokeModel</span>
    <span style="color: #0000ff;">var</span> model = JsonConvert.DeserializeObject&lt;JsInvokeModel&gt;<span style="color: #000000;">(e.Value);
    </span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (model.Type)
    {
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">image</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            Info.Text </span>=<span style="color: #000000;"> e.Value;
            </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">swiperight</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            </span><span style="color: #008000;">//</span><span style="color: #008000;">右滑</span>
            Info.Text =<span style="color: #000000;"> e.Value;            
            </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">swipeleft</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            </span><span style="color: #008000;">//</span><span style="color: #008000;">左滑</span>
            Info.Text =<span style="color: #000000;"> e.Value;
            </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">text</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            Info.Text </span>=<span style="color: #000000;"> e.Value;
            </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
    }
}</span></pre>
</div>
<p><strong><span style="font-size: 14pt;">　　</span></strong>WebView虽然提供了同步方法InvokeScript，但是在WP8.1没有实现</p>
<p>　　　通过InvokeScriptAsync，可以做更多操作，例如，相信对于更换颜色（夜间模式），修改字体大小等</p>
<p><strong><span style="font-size: 14pt;">4、WebView导航</span></strong>&nbsp;</p>
<pre><span style="font-size: 18px;">两种方式</span></pre>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;">后退
    </span><span style="color: #008000;">//</span><span style="color: #008000;">WebView.GoBack();</span>
    <span style="color: #0000ff;">await</span> WebView.InvokeScriptAsync(<span style="color: #800000;">"</span><span style="color: #800000;">eval</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span> []{<span style="color: #800000;">"</span><span style="color: #800000;">history.go(-1)</span><span style="color: #800000;">"</span><span style="color: #000000;">});

    </span><span style="color: #008000;">//</span><span style="color: #008000;">刷新
    </span><span style="color: #008000;">//</span><span style="color: #008000;">WebView.Refresh();</span>
    <span style="color: #0000ff;">await</span> WebView.InvokeScriptAsync(<span style="color: #800000;">"</span><span style="color: #800000;">eval</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span>[] { <span style="color: #800000;">"</span><span style="color: #800000;">history.go()</span><span style="color: #800000;">"</span><span style="color: #000000;"> });        

    </span><span style="color: #008000;">//</span><span style="color: #008000;">前进
    </span><span style="color: #008000;">//</span><span style="color: #008000;">WebView.GoForward();</span>
    <span style="color: #0000ff;">await</span> WebView.InvokeScriptAsync(<span style="color: #800000;">"</span><span style="color: #800000;">eval</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span>[] { <span style="color: #800000;">"</span><span style="color: #800000;">history.go(1)</span><span style="color: #800000;">"</span> });</pre>
</div>
<p><strong style="line-height: 1.5;"><span style="font-size: 14pt;">5、手势</span></strong></p>
<p>　　由于WebView的内部结构与WebBrowser不同，WebView无法监听到Manipulation事件</p>
<p>　　场景：当我们需要在PivotItem中放置WebView的时候，左右滑动无法切换PivotItem，下面通过JS手势监听WebView上面的手势操作，然后传到后台代码进行处理，这里没有做实时处理，只是监听了手势离开时的速度判断左右滑动</p>
<p>&nbsp;</p>
<p>　　5.1、定义手势监听事件方法</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('d27ef915-e64d-40a6-b9f6-25b4486a9808')"><img id="code_img_closed_d27ef915-e64d-40a6-b9f6-25b4486a9808" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_d27ef915-e64d-40a6-b9f6-25b4486a9808" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('d27ef915-e64d-40a6-b9f6-25b4486a9808',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_d27ef915-e64d-40a6-b9f6-25b4486a9808" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">var</span><span style="color: #000000;"> gesture;
</span><span style="color: #008000;">//</span><span style="color: #008000;">记录手势操作开始位置</span>
<span style="color: #0000ff;">var</span><span style="color: #000000;"> gestureStartX;

</span><span style="color: #008000;">//</span><span style="color: #008000;">触发Id,防止重复触发，触发Id与手势Id</span>
<span style="color: #0000ff;">var</span> gestureId = 1<span style="color: #000000;">;
</span><span style="color: #0000ff;">var</span> lastGestureId = 0<span style="color: #000000;">;

</span><span style="color: #008000;">//</span><span style="color: #008000;">速度触发</span>
<span style="color: #0000ff;">var</span> gestureVector = 1.5<span style="color: #000000;">;

</span><span style="color: #008000;">//</span><span style="color: #008000;">注册手势事件</span>
<span style="color: #0000ff;">function</span><span style="color: #000000;"> prepareTarget(target, eventListener) {
    </span><span style="color: #008000;">//</span><span style="color: #008000;">var target = document.getElementById(targetId);</span>
    target.addEventListener("MSGestureStart", eventListener, <span style="color: #0000ff;">false</span><span style="color: #000000;">);
    target.addEventListener(</span>"MSGestureEnd", eventListener, <span style="color: #0000ff;">false</span><span style="color: #000000;">);
    target.addEventListener(</span>"MSGestureChange", eventListener, <span style="color: #0000ff;">false</span><span style="color: #000000;">);
    target.addEventListener(</span>"MSInertiaStart", eventListener, <span style="color: #0000ff;">false</span><span style="color: #000000;">);
    </span><span style="color: #008000;">//</span><span style="color: #008000;">target.addEventListener("MSGestureTap", eventListener, false);</span>
    <span style="color: #008000;">//</span><span style="color: #008000;">target.addEventListener("MSGestureHold", eventListener, false);</span>
    target.addEventListener("pointerdown", onPointDown, <span style="color: #0000ff;">false</span><span style="color: #000000;">);
    target.addEventListener(</span>"pointerup", onPointUp, <span style="color: #0000ff;">false</span><span style="color: #000000;">);

    gesture </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> MSGesture();
    gesture.target </span>=<span style="color: #000000;"> target;
}

</span><span style="color: #0000ff;">function</span><span style="color: #000000;"> onPointUp(e) {
    </span><span style="color: #008000;">//</span><span style="color: #008000;">把触发时间参数传到gesture</span>
<span style="color: #000000;">    gesture.addPointer(e.pointerId);
}

</span><span style="color: #0000ff;">function</span><span style="color: #000000;"> onPointDown(e) {
    </span><span style="color: #008000;">//</span><span style="color: #008000;">把触发时间参数传到gesture</span>
<span style="color: #000000;">    gesture.addPointer(e.pointerId);
}

</span><span style="color: #008000;">//</span><span style="color: #008000;">手势事件</span><span style="color: #008000;">
//</span><span style="color: #008000;">具体的属性参见：https://msdn.microsoft.com/zh-cn/library/ie/hh772076%28v=vs.85%29.aspx</span>
<span style="color: #0000ff;">function</span><span style="color: #000000;"> eventListener(evt) {
    </span><span style="color: #0000ff;">var</span> myGesture =<span style="color: #000000;"> evt.gestureObject;
    </span><span style="color: #0000ff;">if</span> (evt.type == "MSGestureStart"<span style="color: #000000;">) {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">开始触发，记录初始位置</span>
        gestureStartX =<span style="color: #000000;"> evt.clientX;
    }
    </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (evt.type == "MSInertiaStart"<span style="color: #000000;">) {
        </span><span style="color: #0000ff;">if</span> (lastGestureId == gestureId || evt.velocityX == "undefined"<span style="color: #000000;">) {
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;">;
        } </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {
            </span><span style="color: #008000;">//</span><span style="color: #008000;">释放时触发惯性事件，判断手势释放时的速度</span>
            <span style="color: #0000ff;">if</span> (evt.velocityX &gt;<span style="color: #000000;"> gestureVector) {
                </span><span style="color: #0000ff;">var</span> jsonObj = { type: "swiperight"<span style="color: #000000;"> };
                window.external.notify(JSON.stringify(jsonObj));
                lastGestureId </span>=<span style="color: #000000;"> gestureId;
            } </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (evt.velocityX &lt; -<span style="color: #000000;">gestureVector) {
                jsonObj </span>= { type: "swipeleft"<span style="color: #000000;"> };
                window.external.notify(JSON.stringify(jsonObj));
                lastGestureId </span>=<span style="color: #000000;"> gestureId;
            }
        }
    }
    </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (evt.type == "MSGestureChange"<span style="color: #000000;">) {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">if (lastGestureId == gestureId) {</span>
        <span style="color: #008000;">//</span><span style="color: #008000;">    return;</span>
        <span style="color: #008000;">//</span><span style="color: #008000;">} else {</span>
        <span style="color: #008000;">//</span><span style="color: #008000;">    var change = evt.clientX - gestureStartX;</span>
        <span style="color: #008000;">//</span><span style="color: #008000;">    window.external.notify("clientX:" + change);</span>
        <span style="color: #008000;">//</span><span style="color: #008000;">}</span>
    } <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (evt.type == "MSGestureEnd"<span style="color: #000000;">) {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">手势结束，Id+1</span>
        gestureId = gestureId + 1<span style="color: #000000;">;
        myGesture.reset();
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">gesture.js</span></div>
<p>　　5.2、在WebView加载完成后，动态加载改JS文件，获取body标签，然后监听事件（参见3.3）</p>
<p>　　5.3、当事件触发的时候改变Pivot.SelectedIndex，这样就能实现在WebView上滑动切换PivotItem</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> WebView_OnScriptNotify(<span style="color: #0000ff;">object</span><span style="color: #000000;"> sender, NotifyEventArgs e)
{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">这个事件函数可以监听到JS通知的消息，消息类型为文本
    </span><span style="color: #008000;">//</span><span style="color: #008000;">这里统一消息格式为：JsInvokeModel</span>
    <span style="color: #0000ff;">var</span> model = JsonConvert.DeserializeObject&lt;JsInvokeModel&gt;<span style="color: #000000;">(e.Value);
    </span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (model.Type)
    {
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">image</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            Info.Text </span>=<span style="color: #000000;"> e.Value;
            </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">swiperight</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            Info.Text </span>=<span style="color: #000000;"> e.Value;
            </span><span style="color: #0000ff;">if</span> (pivot.Items != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
            {
                </span><span style="color: #0000ff;">if</span> (pivot.SelectedIndex &gt; <span style="color: #800080;">0</span><span style="color: #000000;">)
                {
                    pivot.SelectedIndex</span>--<span style="color: #000000;">;
                }
                </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
                {
                    pivot.SelectedIndex </span>= pivot.Items.Count - <span style="color: #800080;">1</span><span style="color: #000000;">;
                }
            }
            </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">swipeleft</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            Info.Text </span>=<span style="color: #000000;"> e.Value;
            </span><span style="color: #0000ff;">if</span> (pivot.Items != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
            {
                </span><span style="color: #0000ff;">if</span> (pivot.SelectedIndex &lt; pivot.Items.Count - <span style="color: #800080;">1</span><span style="color: #000000;">)
                {
                    pivot.SelectedIndex</span>++<span style="color: #000000;">;
                }
                </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
                {
                    pivot.SelectedIndex </span>= <span style="color: #800080;">0</span><span style="color: #000000;">;
                }
            }
            </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
        </span><span style="color: #0000ff;">case</span> <span style="color: #800000;">"</span><span style="color: #800000;">text</span><span style="color: #800000;">"</span><span style="color: #000000;">:
            Info.Text </span>=<span style="color: #000000;"> e.Value;
            </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
    }
}</span></pre>
</div>
<p><strong style="line-height: 1.5;"><span style="font-size: 14pt;">6、常见问题</span></strong></p>
<p>　　6.1、alert和prompt方法在WebView失效，如果需要，可以使用 window.external.notify('message');然后再后台代码进行处理</p>
<p>&nbsp;　 &nbsp;6.2、如果是导航到本地路径（ms-appdata:///local/），需要注意</p>
<p>　　　　6.2.1、必须要将html需要的资源和html文件放在同一个文件夹下，html的资源路径不管是不是&rdquo;/&rdquo;开头，webview都认为是相对路径</p>
<p>　　　　6.2.2、如果html中要的本地文件，如果在对应目录中不存在，wp上会直接跳出应用，大概过1分钟左右崩溃，且捕获不到异常。Windows上没有这现象</p>
<p>　　　　6.2.3、不支持js的window.exteranl.notify功能</p>
<div class="cnblogs_code">
<pre>webView1.Navigate(<span style="color: #0000ff;">new</span> Uri(<span style="color: #800000;">"</span><span style="color: #800000;">ms-appdata:///local/data/html/sample.htm</span><span style="color: #800000;">"</span>));</pre>
</div>
<p>　　　　不知道为什么WebView在导航到本地路径的时候 &nbsp;<span style="color: #0000ff;">window.external.notify</span>&nbsp;会失效，如果需要可以考虑使用 内容流的方式加载本地文件</p>
<p>　　　　下面做简单的演示</p>
<p>　　　　　　1、定义内容留转换器</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('ba78d4fa-76d8-49c6-adf9-c230d389a21b')"><img id="code_img_closed_ba78d4fa-76d8-49c6-adf9-c230d389a21b" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_ba78d4fa-76d8-49c6-adf9-c230d389a21b" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('ba78d4fa-76d8-49c6-adf9-c230d389a21b',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_ba78d4fa-76d8-49c6-adf9-c230d389a21b" class="cnblogs_code_hide">
<pre>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> HtmlStreamUriResolver : IUriToStreamResolver
    {
        </span><span style="color: #0000ff;">public</span> IAsyncOperation&lt;IInputStream&gt;<span style="color: #000000;"> UriToStreamAsync(Uri uri)
        {
            </span><span style="color: #0000ff;">string</span> path =<span style="color: #000000;"> uri.AbsolutePath;
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> GetContent(path).AsAsyncOperation();

        }

        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 根据 uri 返回对应的内容流</span>
        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">async</span> Task&lt;IInputStream&gt; GetContent(<span style="color: #0000ff;">string</span><span style="color: #000000;"> path)
        {
            </span><span style="color: #0000ff;">if</span> (path.StartsWith(<span style="color: #800000;">"</span><span style="color: #800000;">http</span><span style="color: #800000;">"</span><span style="color: #000000;">))
            {
                </span><span style="color: #008000;">//</span><span style="color: #008000;"> http 方式获取内容数据</span>
                <span style="color: #0000ff;">var</span> client = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpClient();
                </span><span style="color: #0000ff;">var</span> response = <span style="color: #0000ff;">await</span> client.GetAsync(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Uri(path), HttpCompletionOption.ResponseHeadersRead);
                </span><span style="color: #0000ff;">return</span> (<span style="color: #0000ff;">await</span><span style="color: #000000;"> response.Content.ReadAsStreamAsync()).AsInputStream();
            }
            </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (path.StartsWith(<span style="color: #800000;">"</span><span style="color: #800000;">/local/cachedata/html/</span><span style="color: #800000;">"</span><span style="color: #000000;">))
            {
                path </span>= <span style="color: #0000ff;">string</span>.Format(<span style="color: #800000;">"</span><span style="color: #800000;">ms-appdata://{0}</span><span style="color: #800000;">"</span><span style="color: #000000;">, path);
                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 获取本地数据</span>
                <span style="color: #0000ff;">var</span> fileRead = <span style="color: #0000ff;">await</span> StorageFile.GetFileFromApplicationUriAsync(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Uri(path));
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">await</span><span style="color: #000000;"> fileRead.OpenAsync(FileAccessMode.Read);
            }
            </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
            {
                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 获取本地数据</span>
                <span style="color: #0000ff;">var</span> fileRead = <span style="color: #0000ff;">await</span> StorageFile.GetFileFromApplicationUriAsync(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Uri(path, UriKind.Absolute));
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">await</span><span style="color: #000000;"> fileRead.OpenAsync(FileAccessMode.Read);
            }
        }
    }</span></pre>
</div>
<span class="cnblogs_code_collapse">HtmlStreamUriResolver </span></div>
<p>　　　　　　2、生成，导航，html中的所有引用都通过HtmlStreamUriResolver返回，具体逻辑在里面处理，通过这样导航的页面可以使用<span style="color: #0000ff;">&nbsp;window.external.notify&nbsp;<span style="color: #000000;">方法</span></span></p>
<div class="cnblogs_code">
<pre>  <span style="color: #008000;">//</span><span style="color: #008000;">生成内容流</span>
  <span style="color: #0000ff;">var</span> htmlStreamUriResolver = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HtmlStreamUriResolver();
  </span><span style="color: #0000ff;">var</span> uri = webView.BuildLocalStreamUri(<span style="color: #800000;">"</span><span style="color: #800000;">tag</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">/local/cachedata/html/sample.html</span><span style="color: #800000;">"</span><span style="color: #000000;">);
  webView.NavigateToLocalStreamUri(uri, htmlStreamUriResolver);</span></pre>
</div>
<p>&nbsp;</p>
<p><strong style="font-size: 14pt; line-height: 1.5;">7、Demo</strong></p>
<p>&nbsp;　　<a href="http://files.cnblogs.com/files/bomo/WebViewDemo.zip" target="_blank">http://files.cnblogs.com/files/bomo/WebViewDemo.zip</a></p>
<p>&nbsp;</p>
<p><strong><span style="font-size: 14pt;">8、参考链接</span></strong></p>
<p>　　手势事件参数说明：<a href="https://msdn.microsoft.com/zh-cn/library/ie/hh772076%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396" target="_blank">https://msdn.microsoft.com/zh-cn/library/ie/hh772076%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396</a></p>
<p>　　WinJS手势：<a href="https://msdn.microsoft.com/zh-cn/library/ie/hh968249(v=vs.85).aspx" target="_blank">https://msdn.microsoft.com/zh-cn/library/ie/hh968249(v=vs.85).aspx</a></p>
<p>　　Win8.1和WP8.1在UniversalAPP中WebView的研究：<a href="http://blog.csdn.net/hzdinglai/article/details/41073739" target="_blank">http://blog.csdn.net/hzdinglai/article/details/41073739</a></p>
<p><span>　　重新想象 Windows 8.1 Store Apps (81) : WebView：</span><a href="http://www.cnblogs.com/webabcd/p/3803384.html" target="_blank">http://www.cnblogs.com/webabcd/p/3803384.html</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>关于WP8的WebBrowser，请移步：<a href="http://www.cnblogs.com/bomo/p/3949994.html" target="_blank">http://www.cnblogs.com/bomo/p/3949994.html</a></p>
<p>&nbsp;</p>
<p>个人能力有限，如果上文有误或者您有更好的实现，可以给我留言</p>
<p>转载请注明出处：<a href="http://www.cnblogs.com/bomo/p/4320077.html" target="_blank">http://www.cnblogs.com/bomo/p/4320077.html</a>&nbsp;</p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2015-03-07 13:28</span> <a href='http://www.cnblogs.com/bomo/'>bomo</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=4320077" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(4320077);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=127538,cb_entryId=4320077,cb_blogApp=currentBlogApp,cb_blogUserGuid='178a5c29-aef8-e111-aa3f-842b2b196315',cb_entryCreatedDate='2015/3/7 13:28:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = canShowAdsense(); 
    fixPostBodyFormat();
</script>
<div id="google_ad_c1" class="c_ad_block"></div>
<div id="under_post_news"></div>
<div id="google_ad_c2" class="c_ad_block"></div>
<div id="under_post_kb"></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2015 bomo
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
</body>
</html>
